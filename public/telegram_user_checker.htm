<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Telegram Membership Status</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
            text-align: center;
            line-height: 1.6;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        .result {
            margin-top: 20px;
            padding: 15px;
            border-radius: 4px;
            font-size: 18px;
            font-weight: bold;
        }
        .member {
            background: #e6f7e6;
            color: #0a7d0a;
            border: 1px solid #c3e6c3;
        }
        .not-member {
            background: #f7e6e6;
            color: #c70000;
            border: 1px solid #e6c3c3;
        }
        .error {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0,0,0,.1);
            border-radius: 50%;
            border-top-color: #333;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .params {
            background: #f5f5f5;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            text-align: left;
        }
        .params div {
            margin-bottom: 5px;
        }
        .params strong {
            display: inline-block;
            width: 100px;
        }
    </style>
</head>
<body>
    <h1>Telegram Membership Status</h1>

    <div class="params">
        <div><strong>User ID:</strong> <span id="param-userid">Loading...</span></div>
        <div><strong>Channel:</strong> <span id="param-channelid">Loading...</span></div>
    </div>

    <div id="status">Checking membership status...</div>
    <div id="result" class="result" style="display: none;"></div>

    <script>
        // IMPORTANT: Replace this with your actual Vercel deployment URL
        const API_BASE_URL = 'https://telegram-checker.vercel.app';

        // Function to get URL parameters
        function getUrlParams() {
            const params = {};
            const queryString = window.location.search;
            const urlParams = new URLSearchParams(queryString);

            params.userId = urlParams.get('userId');
            params.channelId = urlParams.get('channelId');

            return params;
        }

        // Function to check membership
        async function checkMembership(userId, channelId) {
            try {
                // Update the parameters display
                document.getElementById('param-userid').textContent = userId;
                document.getElementById('param-channelid').textContent = channelId;

                // Show loading state
                document.getElementById('status').innerHTML = '<span class="loading"></span> Checking membership...';

                // Make API request to your Vercel deployment
                const response = await fetch(`${API_BASE_URL}/api/check-membership?userId=${userId}&channelId=${encodeURIComponent(channelId)}`);
                const data = await response.json();

                // Hide status message
                document.getElementById('status').style.display = 'none';

                // Show result
                const resultElement = document.getElementById('result');

                if (!response.ok) {
                    resultElement.className = 'result error';
                    resultElement.textContent = `Error: ${data.error || 'Failed to check membership'}`;
                    resultElement.style.display = 'block';
                    return;
                }

                // Process the result based on isMember value
                if (data.isMember === true) {
                    resultElement.className = 'result member';
                    resultElement.textContent = `This user is a member of the group`;
                } else if (data.isMember === false) {
                    resultElement.className = 'result not-member';
                    resultElement.textContent = `This user is not a member of the group`;
                } else {
                    resultElement.className = 'result error';
                    resultElement.textContent = `Unexpected response format`;
                }

                resultElement.style.display = 'block';

            } catch (error) {
                document.getElementById('status').style.display = 'none';
                const resultElement = document.getElementById('result');
                resultElement.className = 'result error';
                resultElement.textContent = `Error: ${error.message}`;
                resultElement.style.display = 'block';
            }
        }

        // On page load
        document.addEventListener('DOMContentLoaded', () => {
            const params = getUrlParams();

            if (!params.userId || !params.channelId) {
                document.getElementById('status').style.display = 'none';
                document.getElementById('param-userid').textContent = 'Missing';
                document.getElementById('param-channelid').textContent = 'Missing';

                const resultElement = document.getElementById('result');
                resultElement.className = 'result error';
                resultElement.textContent = 'Error: Missing userId or channelId in URL parameters';
                resultElement.style.display = 'block';
                return;
            }

            checkMembership(params.userId, params.channelId);
        });
    </script>
</body>
</html>
